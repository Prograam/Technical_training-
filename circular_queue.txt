class MyCircularQueue {
    int front, rare;
    vector<int> v;
public:
    MyCircularQueue(int k) {
        v.resize(k);
        front = -1;
        rare = -1;
    }
    
    bool enQueue(int value) {
        if (isFull()) {
            return false;
        }
        if (front == -1 && rare == -1) {
            front = rare = 0;
            v[rare] = value;
            return true;
        } else if (rare == v.size() - 1 && front != 0) {
            rare = 0;
            v[rare] = value;
            return true;
        } else if(rare+1 !=front){
            rare = rare+1;
            v[rare] = value;
            return true;
        }
        else{
            return false;
        }
    }
    
    bool deQueue() {
        if (isEmpty()) {
            return false;
        }
        if (front == rare) {
            front = rare = -1;
            return true;
        } else if (front == v.size() - 1) {
            front = 0;
            return true;
        } else {
            front++;
            return true;
        }
    }
    
    int Front() {
        if (isEmpty()) {
            return -1;
        }
        return v[front];
    }
    
    int Rear() {
        if (isEmpty()) {
            return -1;
        }
        return v[rare];
    }
    
    bool isEmpty() {
        return (front == -1 && rare == -1);
    }
    
    bool isFull() {
       if(rare == v.size()-1 &&front == 0 || rare +1 == front){
           return true;
       }
       return false;
    }
};


/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */